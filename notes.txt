https://docs.docker.com/engine/install/ubuntu/

snap install microk8s --classic

~/projects/k8sdemo
mkdir deploy
git clone https://github.com/mattrr78/k8sdemo-backend
git clone https://github.com/mattrr78/k8sdemo-integration

Vagrantfile changes
Restart vagrant and ssh into

MySQL k8sdemo account, database, and customer table

echo "alias kubectl='microk8s.kubectl'" > ~/.bash_aliases
. ~/.bash_aliases

microk8s.status
microk8s.enable dns
microk8s.enable host-access
microk8s.enable metrics-server

mkdir -p /k8sdemo-deploy/k8sdemo-integration/build/libs

On Mac:
Gradle Build
Copy Dockerfile, build/libs/k8sdemo-integration-1.0.0.jar, and k8s directory over to ../deploy/k8sdemo-integration

docker build . -t k8sdemo-integration:v1.0.0

docker save k8sdemo-integration:v1.0.0 > k8sdemo-integration_v1.0.0.tar
microk8s.ctr image import k8sdemo-integration_v1.0.0.tar
microk8s.ctr images ls

Create config, add application.properties and add weather API key

kubectl apply -f k8sdemo-integration-volume.yml
kubectl apply -f k8sdemo-integration-volume-claim.yml
kubectl apply -f k8sdemo-integration-pod.yml

kubectl exec k8sdemo-integration -it -- /bin/sh
    ping 8.8.8.8
    ping www.google.com

Can't test yet, have to expose as service
kubectl apply -f k8sdemo-integration-service.yml

curl "http://localhost:31120/k8sdemo/integration/weather?city=Carlisle&state=Pennsylvania&country=US"

Entirely done with k8sdemo-integration and can close IntelliJ for k8sdemo-integration

On Mac:
Gradle Build
Copy Dockerfile, build/libs/k8sdemo-integration-1.0.0.jar, and k8s directory over to ../deploy/k8sdemo-integration

docker build . -t k8sdemo-backend:v1.0.0
docker save k8sdemo-backend:v1.0.0 > k8sdemo-backend_v1.0.0.tar
microk8s ctr image import k8sdemo-backend_v1.0.0.tar

Create config, add application.properties and add properties

microk8s.ctr images rm docker.io/library/k8sdemo-backend:v1.0.0
docker image rm k8sdemo-backend:v1.0.0

microk8s.ctr containers ls
microk8s.ctr images ls
microk8s.ctr images rm docker.io/library/k8sdemo-integration:v1.0.0

docker ps -a
docker container rm CONTAINER_ID
docker image rm k8sdemo-integration:v1.0.0

curl "http://localhost:31110/k8sdemo/backend/customer/weather/1"
curl -X POST "http://localhost:31110/k8sdemo/backend/customer/junk/100000"
Inside pod:  wget --post-data '' http://localhost:9110/k8sdemo/backend/customer/junk/1000000
curl -X DELETE "http://localhost:31110/k8sdemo/backend/customer/junk"

Can I set whatever port I want for a service's nodePort?
Yes, but only in the range 30000-32767

iptables -P FORWARD ACCEPT


